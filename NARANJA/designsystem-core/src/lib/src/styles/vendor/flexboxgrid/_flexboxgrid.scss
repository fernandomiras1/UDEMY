@import "mixins/flex";
@import "../../variables";

// Set the number of columns you want to use on your layout.
$grid-columns: 12 !default;
// Set the gutter between columns.
$gutter-width: 1rem !default;
// Set a margin for the container sides.
$outer-margin: 2rem !default;

// $gutter-compensation: $gutter-width * 0.5 * -1;
$half-gutter-width: $gutter-width * 0.5;

$flexboxgrid-max-width: 1096px !default;
$flexboxgrid-middle-width: 960px !default;

// Syntax:
// name | min media query | max media query | max-width | margin container | col padding
$breakpoints:
  xxs $screen-xxs-min  $screen-xxs-max auto                      $gutter-width         $gutter-width,
  xs  $screen-xs-min   $screen-xs-max  auto                      ($gutter-width * 1.5) $gutter-width,
  sm  $screen-s-min    $screen-s-max   auto                      ($gutter-width * 2)   ($gutter-width * 2),
  md  $screen-m-min    $screen-m-max   auto                      ($gutter-width * 2)   ($gutter-width * 2),
  lg  $screen-l-min    $screen-l-max   $flexboxgrid-middle-width auto                  ($gutter-width * 2),
  xl  $screen-xl-min   $screen-xl-max  $flexboxgrid-max-width    auto                  ($gutter-width * 2);

.wrapper {
  box-sizing: border-box;
  margin: 0 auto;
}

.container-fluid {
  margin-left: auto;
  margin-right: auto;
  padding-left: 0;
  padding-right: 0;
}

.row {
  box-sizing: border-box;
  @include flexbox();
  @include flex(0, 1, auto);
  @include flex-direction(row);
  @include flex-wrap(wrap);
}

.row.reverse {
  @include flex-direction(row-reverse);
}

.col.reverse {
  @include flex-direction(column-reverse);
}

@mixin flexboxgrid-sass-col-common {
  box-sizing: border-box;
  @include flex(0, 0, auto);
}

@each $breakpoint in $breakpoints {
  $name: nth($breakpoint, 1);
  $min-size: nth($breakpoint, 2);
  $max-size: nth($breakpoint, 3);
  $width: nth($breakpoint, 4);
  $margin-container: nth($breakpoint, 5);
  $padding-between-col: nth($breakpoint, 6);

  @media only screen and (min-width: $min-size) {

    [class^="col-"] {
      padding-right: $padding-between-col * 0.5;
      padding-left: $padding-between-col * 0.5;
    }

    @for $i from 1 through $grid-columns {
      .col-#{$name}-#{$i} {
        @include flexboxgrid-sass-col-common;
        @include flex-basis(100% / $grid-columns * $i);
        max-width: 100% / $grid-columns * $i;
      }

      .col-#{$name}-offset-#{$i} {
        @include flexboxgrid-sass-col-common;
        margin-left: 100% / $grid-columns * $i;
        @include flex-basis(100%);
      }
    }

    .container {
      width: $width;
      margin-right: $margin-container;
      margin-left: $margin-container;
    }

    .wrapper {
      max-width: $width;
    }

    .row {
      margin-left: ($padding-between-col * 0.5) * -1;
      margin-right: ($padding-between-col * 0.5) * -1;
    }

    .col-#{$name} {
      @include flexboxgrid-sass-col-common;
      @include flex-grow(1);
      @include flex-basis(0);
      max-width: 100%;
    }

    .start-#{$name} {
      @include justify-content(flex-start);
      text-align: start;
    }

    .center-#{$name} {
      @include justify-content(center);
      text-align: center;
    }

    .end-#{$name} {
      @include justify-content(flex-end);
      text-align: end;
    }

    .top-#{$name} {
      @include align-items(flex-start);
    }

    .middle-#{$name} {
      @include align-items(center);
    }

    .bottom-#{$name} {
      @include align-items(flex-end);
    }

    .around-#{$name} {
      @include justify-content(space-around);
    }

    .between-#{$name} {
      @include justify-content(space-between);
    }

    .first-#{$name} {
      order: -1;
    }

    .last-#{$name} {
      order: 1;
    }
  }

  @media only screen and (min-width: $min-size) {

    .hide-up-#{$name} {
      display: none !important;
    }

    @each $value in $displays {
      .show-up-#{$name}-#{$value} {
        display: $value !important;
      }
    }
  }

  @media (min-width: $min-size) and (max-width: $max-size) {

    .hide-in-#{$name} {
      display: none !important;
    }

    @each $value in $displays {
      .show-#{$value}-in-#{$name} {
        display: $value !important;
      }
    }
  }

  @media only screen and (max-width: $max-size) {

    .hide-down-#{$name} {
      display: none !important;
    }

    @each $value in $displays {
      .show-#{$value}-down-#{$name} {
        display: $value !important;
      }
    }
  }
}
